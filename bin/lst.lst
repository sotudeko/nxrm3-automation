Listing Integration API Scripts
[ {
  "name" : "setup_privilege",
  "content" : "import groovy.json.JsonSlurper\nimport org.sonatype.nexus.security.privilege.NoSuchPrivilegeException\nimport org.sonatype.nexus.security.user.UserManager\nimport org.sonatype.nexus.security.privilege.Privilege\n\nparsed_args = new JsonSlurper().parseText(args)\n\nauthManager = security.getSecuritySystem().getAuthorizationManager(UserManager.DEFAULT_SOURCE)\n\ndef privilege\nboolean update = true\n\ntry {\n    privilege = authManager.getPrivilege(parsed_args.name)\n} catch (NoSuchPrivilegeException ignored) {\n    // could not find any existing  privilege\n    update = false\n    privilege = new Privilege(\n            'id': parsed_args.name,\n            'name': parsed_args.name\n    )\n}\n\nprivilege.setDescription(parsed_args.description)\nprivilege.setType(parsed_args.type)\nprivilege.setProperties([\n        'format': parsed_args.format,\n        'repository': parsed_args.repository,\n        'actions': parsed_args.actions.join(',')\n] as Map<String, String>)\n\nif (update) {\n    authManager.updatePrivilege(privilege)\n} else {\n    authManager.addPrivilege(privilege)\n}",
  "type" : "groovy"
}, {
  "name" : "create_repo_docker_hosted",
  "content" : "import groovy.json.JsonSlurper\nimport org.sonatype.nexus.repository.config.Configuration\n\nparsed_args = new JsonSlurper().parseText(args)\n\nconfiguration = new Configuration(\n        repositoryName: parsed_args.name,\n        recipeName: 'docker-hosted',\n        online: true,\n        attributes: [\n                docker: [\n                        httpPort: parsed_args.http_port,\n                        v1Enabled : parsed_args.v1_enabled\n                ],\n                storage: [\n                        writePolicy: parsed_args.write_policy.toUpperCase(),\n                        blobStoreName: parsed_args.blob_store,\n                        strictContentTypeValidation: Boolean.valueOf(parsed_args.strict_content_validation)\n                ]\n        ]\n)\n\ndef existingRepository = repository.getRepositoryManager().get(parsed_args.name)\n\nif (existingRepository != null) {\n    existingRepository.stop()\n    configuration.attributes['storage']['blobStoreName'] = existingRepository.configuration.attributes['storage']['blobStoreName']\n    existingRepository.update(configuration)\n    existingRepository.start()\n} else {\n    repository.getRepositoryManager().create(configuration)\n}",
  "type" : "groovy"
}, {
  "name" : "create_repo_raw_group",
  "content" : "import groovy.json.JsonSlurper\nimport org.sonatype.nexus.repository.config.Configuration\n\nparsed_args = new JsonSlurper().parseText(args)\n\nconfiguration = new Configuration(\n        repositoryName: parsed_args.name,\n        recipeName: 'raw-group',\n        online: true,\n        attributes: [\n                group  : [\n                        memberNames: parsed_args.member_repos\n                ],\n                storage: [\n                        blobStoreName: parsed_args.blob_store,\n                        strictContentTypeValidation: Boolean.valueOf(parsed_args.strict_content_validation)\n                ]\n        ]\n)\n\ndef existingRepository = repository.getRepositoryManager().get(parsed_args.name)\n\nif (existingRepository != null) {\n    existingRepository.stop()\n    configuration.attributes['storage']['blobStoreName'] = existingRepository.configuration.attributes['storage']['blobStoreName']\n    existingRepository.update(configuration)\n    existingRepository.start()\n} else {\n    repository.getRepositoryManager().create(configuration)\n}",
  "type" : "groovy"
}, {
  "name" : "create_repo_npm_proxy",
  "content" : "import groovy.json.JsonSlurper\nimport org.sonatype.nexus.repository.config.Configuration\n\nparsed_args = new JsonSlurper().parseText(args)\n\nauthentication = parsed_args.remote_username == null ? null : [\n        type: 'username',\n        username: parsed_args.remote_username,\n        password: parsed_args.remote_password\n]\n\nconfiguration = new Configuration(\n        repositoryName: parsed_args.name,\n        recipeName: 'npm-proxy',\n        online: true,\n        attributes: [\n                proxy  : [\n                        remoteUrl: parsed_args.remote_url,\n                        contentMaxAge: 1440.0,\n                        metadataMaxAge: 1440.0\n                ],\n                httpclient: [\n                        blocked: false,\n                        autoBlock: true,\n                        connection: [\n                                useTrustStore: false\n                        ]\n                ],\n                storage: [\n                        blobStoreName: parsed_args.blob_store,\n                        strictContentTypeValidation: Boolean.valueOf(parsed_args.strict_content_validation)\n                ],\n                negativeCache: [\n                        enabled: true,\n                        timeToLive: 1440.0\n                ]\n        ]\n)\n\ndef existingRepository = repository.getRepositoryManager().get(parsed_args.name)\n\nif (existingRepository != null) {\n    existingRepository.stop()\n    configuration.attributes['storage']['blobStoreName'] = existingRepository.configuration.attributes['storage']['blobStoreName']\n    existingRepository.update(configuration)\n    existingRepository.start()\n} else {\n    repository.getRepositoryManager().create(configuration)\n}",
  "type" : "groovy"
}, {
  "name" : "create_capability",
  "content" : "import groovy.json.JsonSlurper\nimport org.sonatype.nexus.capability.CapabilityReference\nimport org.sonatype.nexus.capability.CapabilityType\nimport org.sonatype.nexus.internal.capability.DefaultCapabilityReference\nimport org.sonatype.nexus.internal.capability.DefaultCapabilityRegistry\n\nparsed_args = new JsonSlurper().parseText(args)\n\nparsed_args.capability_properties['headerEnabled'] = parsed_args.capability_properties['headerEnabled'].toString()\nparsed_args.capability_properties['footerEnabled'] = parsed_args.capability_properties['footerEnabled'].toString()\n\ndef capabilityRegistry = container.lookup(DefaultCapabilityRegistry.class.getName())\ndef capabilityType = CapabilityType.capabilityType(parsed_args.capability_typeId)\n\nDefaultCapabilityReference existing = capabilityRegistry.all.find { CapabilityReference capabilityReference ->\n    capabilityReference.context().descriptor().type() == capabilityType\n}\n\nif (existing) {\n    log.info(parsed_args.typeId + ' capability updated to: {}',\n            capabilityRegistry.update(existing.id(), existing.active, existing.notes(), parsed_args.capability_properties).toString()\n    )\n}\nelse {\n    log.info(parsed_args.typeId + ' capability created as: {}', capabilityRegistry.\n            add(capabilityType, true, 'configured through api', parsed_args.capability_properties).toString()\n    )\n}",
  "type" : "groovy"
}, {
  "name" : "create_role",
  "content" : "import groovy.json.JsonOutput\nimport groovy.json.JsonSlurper\nimport org.sonatype.nexus.security.user.UserManager\nimport org.sonatype.nexus.security.role.NoSuchRoleException\n\nList<Map<String, String>> actionDetails = []\nMap scriptResults = [changed: false, error: false]\nscriptResults.put('action_details', actionDetails)\n\nparsed_args = new JsonSlurper().parseText(args)\n\nauthManager = security.getSecuritySystem().getAuthorizationManager(UserManager.DEFAULT_SOURCE)\n\ndef existingRole = null\n\ntry {\n    existingRole = authManager.getRole(parsed_args.id)\n} catch (NoSuchRoleException ignored) {\n    // could not find role\n}\n\nprivileges = (parsed_args.privileges == null ? new HashSet() : parsed_args.privileges.toSet())\nroles = (parsed_args.roles == null ? new HashSet() : parsed_args.roles.toSet())\n\nMap<String, String> currentResult = [id: parsed_args.id, name: parsed_args.name, status: 'no change']   \n\ntry {\n    if (existingRole != null) {\n        existingRole.setName(parsed_args.name)\n        existingRole.setDescription(parsed_args.description)\n        existingRole.setPrivileges(privileges)\n        existingRole.setRoles(roles)\n        authManager.updateRole(existingRole)\n\n        currentResult.status = 'updated'\n\n    } \n    else {\n        security.addRole(parsed_args.id, parsed_args.name, parsed_args.description, privileges.toList(), roles.toList())\n        currentResult.status = 'created'\n    }\n\n    log.info(\"Role {} updated\", parsed_args.name)\n    scriptResults.changed = true\n}\ncatch (Exception e){\n    log.error(\"Role {} could not be updated\", )\n    currentResult.status = 'error'\n    currentResult.put('error_msg', e.toString())\n    scriptResults.error = true\n}\n\nscriptResults['action_details'].add(currentResult)\nreturn JsonOutput.toJson(scriptResults)",
  "type" : "groovy"
}, {
  "name" : "setup_user",
  "content" : "import groovy.json.JsonSlurper\nimport org.sonatype.nexus.security.user.UserNotFoundException\n\nparsed_args = new JsonSlurper().parseText(args)\n\ntry {\n    // update an existing user\n    user = security.securitySystem.getUser(parsed_args.username)\n    user.setFirstName(parsed_args.first_name)\n    user.setLastName(parsed_args.last_name)\n    user.setEmailAddress(parsed_args.email)\n    security.securitySystem.updateUser(user)\n    security.setUserRoles(parsed_args.username, parsed_args.roles)\n    security.securitySystem.changePassword(parsed_args.username, parsed_args.password)\n} catch(UserNotFoundException ignored) {\n    // create the new user\n    security.addUser(parsed_args.username, parsed_args.first_name, parsed_args.last_name, parsed_args.email, true, parsed_args.password, parsed_args.roles)\n}",
  "type" : "groovy"
}, {
  "name" : "create_repo_docker_proxy",
  "content" : "import groovy.json.JsonSlurper\nimport org.sonatype.nexus.repository.config.Configuration\n\nparsed_args = new JsonSlurper().parseText(args)\n\nconfiguration = new Configuration(\n        repositoryName: parsed_args.name,\n        recipeName: 'docker-proxy',\n        online: true,\n        attributes: [\n                docker: [\n                        httpPort: parsed_args.http_port,\n                        v1Enabled : parsed_args.v1_enabled\n                ],\n                proxy: [\n                        remoteUrl: parsed_args.proxy_url,\n                        contentMaxAge: 1440,\n                        metadataMaxAge: 1440\n                ],\n                dockerProxy: [\n                        indexType: parsed_args.index_type,\n                        useTrustStoreForIndexAccess: parsed_args.use_nexus_certificates_to_access_index\n                ],\n                httpclient: [\n                        blocked: false,\n                        autoBlock: true,\n                        connection: [\n                          useTrustStore: false\n                        ]\n                ],\n                storage: [\n                        writePolicy: parsed_args.write_policy.toUpperCase(),\n                        blobStoreName: parsed_args.blob_store,\n                        strictContentTypeValidation: Boolean.valueOf(parsed_args.strict_content_validation)\n                ]\n        ]\n)\n\ndef existingRepository = repository.getRepositoryManager().get(parsed_args.name)\n\nif (existingRepository != null) {\n    existingRepository.stop()\n    configuration.attributes['storage']['blobStoreName'] = existingRepository.configuration.attributes['storage']['blobStoreName']\n    existingRepository.update(configuration)\n    existingRepository.start()\n} else {\n    repository.getRepositoryManager().create(configuration)\n}",
  "type" : "groovy"
}, {
  "name" : "create_repo_rubygems_hosted",
  "content" : "import groovy.json.JsonSlurper\nimport org.sonatype.nexus.repository.config.Configuration\n\nparsed_args = new JsonSlurper().parseText(args)\n\nconfiguration = new Configuration(\n        repositoryName: parsed_args.name,\n        recipeName: 'rubygems-hosted',\n        online: true,\n        attributes: [\n                storage: [\n                        writePolicy: parsed_args.write_policy.toUpperCase(),\n                        blobStoreName: parsed_args.blob_store,\n                        strictContentTypeValidation: Boolean.valueOf(parsed_args.strict_content_validation)\n                ]\n        ]\n)\n\ndef existingRepository = repository.getRepositoryManager().get(parsed_args.name)\n\nif (existingRepository != null) {\n    existingRepository.stop()\n    configuration.attributes['storage']['blobStoreName'] = existingRepository.configuration.attributes['storage']['blobStoreName']\n    existingRepository.update(configuration)\n    existingRepository.start()\n} else {\n    repository.getRepositoryManager().create(configuration)\n}",
  "type" : "groovy"
}, {
  "name" : "create_repo_npm_group",
  "content" : "import groovy.json.JsonSlurper\nimport org.sonatype.nexus.repository.config.Configuration\n\nparsed_args = new JsonSlurper().parseText(args)\n\nconfiguration = new Configuration(\n        repositoryName: parsed_args.name,\n        recipeName: 'npm-group',\n        online: true,\n        attributes: [\n                group  : [\n                        memberNames: parsed_args.member_repos\n                ],\n                storage: [\n                        blobStoreName: parsed_args.blob_store,\n                        strictContentTypeValidation: Boolean.valueOf(parsed_args.strict_content_validation)\n                ]\n        ]\n)\n\ndef existingRepository = repository.getRepositoryManager().get(parsed_args.name)\n\nif (existingRepository != null) {\n    existingRepository.stop()\n    configuration.attributes['storage']['blobStoreName'] = existingRepository.configuration.attributes['storage']['blobStoreName']\n    existingRepository.update(configuration)\n    existingRepository.start()\n} else {\n    repository.getRepositoryManager().create(configuration)\n}",
  "type" : "groovy"
}, {
  "name" : "create_content_selector",
  "content" : "import groovy.json.JsonOutput\nimport groovy.json.JsonSlurper\nimport org.sonatype.nexus.security.user.UserManager\nimport org.sonatype.nexus.security.role.NoSuchRoleException\nimport org.sonatype.nexus.selector.*\n\nList<Map<String, String>> actionDetails = []\nMap scriptResults = [changed: false, error: false]\nscriptResults.put('action_details', actionDetails)\n\nparsed_args = new JsonSlurper().parseText(args)\n\nauthManager = security.getSecuritySystem().getAuthorizationManager(UserManager.DEFAULT_SOURCE)\n\nMap<String, String> currentResult = [id: parsed_args.id, name: parsed_args.name, status: 'no change']   \n\ntry {\n    def selectorConfig = new SelectorConfiguration(\n            name: parsed_args.name,\n            type: 'jexl',\n            description: parsed_args.description,\n            attributes: ['expression': parsed_args.expression]\n    )\n\n    if (selectorManager.browse().find { it -> it.name == selectorConfig.name } == null) {\n        selectorManager.create(selectorConfig)\n    }\n\n    log.info(\"Content selector created: \", parsed_args.name)\n    scriptResults.changed = true\n}\ncatch (Exception e){\n    log.error(\"Content selector could not be updated\", )\n    currentResult.status = 'error'\n    currentResult.put('error_msg', e.toString())\n    scriptResults.error = true\n}\n\nscriptResults['action_details'].add(currentResult)\nreturn JsonOutput.toJson(scriptResults)",
  "type" : "groovy"
}, {
  "name" : "delete_repo",
  "content" : "import groovy.json.JsonSlurper\n\nparsed_args = new JsonSlurper().parseText(args)\n\nrepository.getRepositoryManager().delete(parsed_args.name)",
  "type" : "groovy"
}, {
  "name" : "create_repo_docker_group",
  "content" : "import groovy.json.JsonSlurper\nimport org.sonatype.nexus.repository.config.Configuration\n\nparsed_args = new JsonSlurper().parseText(args)\n\nconfiguration = new Configuration(\n        repositoryName: parsed_args.name,\n        recipeName: 'docker-group',\n        online: true,\n        attributes: [\n                docker: [\n                        httpPort: parsed_args.http_port,\n                        v1Enabled : parsed_args.v1_enabled\n                ],\n                group: [\n                        memberNames: parsed_args.member_repos\n                ],\n                storage: [\n                        writePolicy: parsed_args.write_policy.toUpperCase(),\n                        blobStoreName: parsed_args.blob_store,\n                        strictContentTypeValidation: Boolean.valueOf(parsed_args.strict_content_validation)\n                ]\n        ]\n)\n\ndef existingRepository = repository.getRepositoryManager().get(parsed_args.name)\n\nif (existingRepository != null) {\n    existingRepository.stop()\n    configuration.attributes['storage']['blobStoreName'] = existingRepository.configuration.attributes['storage']['blobStoreName']\n    existingRepository.update(configuration)\n    existingRepository.start()\n} else {\n    repository.getRepositoryManager().create(configuration)\n}",
  "type" : "groovy"
}, {
  "name" : "create_repo_rubygems_proxy",
  "content" : "import groovy.json.JsonSlurper\nimport org.sonatype.nexus.repository.config.Configuration\n\nparsed_args = new JsonSlurper().parseText(args)\n\nauthentication = parsed_args.remote_username == null ? null : [\n        type: 'username',\n        username: parsed_args.remote_username,\n        password: parsed_args.remote_password\n]\n\nconfiguration = new Configuration(\n        repositoryName: parsed_args.name,\n        recipeName: 'rubygems-proxy',\n        online: true,\n        attributes: [\n                proxy  : [\n                        remoteUrl: parsed_args.remote_url,\n                        contentMaxAge: 1440.0,\n                        metadataMaxAge: 1440.0\n                ],\n                httpclient: [\n                        blocked: false,\n                        autoBlock: true,\n                        authentication: authentication,\n                        connection: [\n                                useTrustStore: false\n                        ]\n                ],\n                storage: [\n                        blobStoreName: parsed_args.blob_store,\n                        strictContentTypeValidation: Boolean.valueOf(parsed_args.strict_content_validation)\n                ],\n                negativeCache: [\n                        enabled: true,\n                        timeToLive: 1440.0\n                ]\n        ]\n)\n\ndef existingRepository = repository.getRepositoryManager().get(parsed_args.name)\n\nif (existingRepository != null) {\n    existingRepository.stop()\n    configuration.attributes['storage']['blobStoreName'] = existingRepository.configuration.attributes['storage']['blobStoreName']\n    existingRepository.update(configuration)\n    existingRepository.start()\n} else {\n    repository.getRepositoryManager().create(configuration)\n}",
  "type" : "groovy"
}, {
  "name" : "create_repo_gitlfs_hosted",
  "content" : "import groovy.json.JsonSlurper\nimport org.sonatype.nexus.repository.config.Configuration\n\nparsed_args = new JsonSlurper().parseText(args)\n\nconfiguration = new Configuration(\n        repositoryName: parsed_args.name,\n        recipeName: 'gitlfs-hosted',\n        online: true,\n        \n        attributes: [\n                // See org.sonatype.nexus.repository.storage.StorageFacetImpl.Config\n                storage: [\n                        writePolicy: parsed_args.write_policy.toUpperCase(),\n                        blobStoreName: parsed_args.blob_store,\n                        strictContentTypeValidation: Boolean.valueOf(parsed_args.strict_content_validation)\n                ]\n        ]\n)\n\ndef existingRepository = repository.getRepositoryManager().get(parsed_args.name)\n\nif (existingRepository != null) {\n    existingRepository.stop()\n    configuration.attributes['storage']['blobStoreName'] = existingRepository.configuration.attributes['storage']['blobStoreName']\n    existingRepository.update(configuration)\n    existingRepository.start()\n} else {\n    repository.getRepositoryManager().create(configuration)\n}",
  "type" : "groovy"
}, {
  "name" : "create_privilege",
  "content" : "import groovy.json.JsonSlurper\nimport org.sonatype.nexus.security.privilege.NoSuchPrivilegeException\nimport org.sonatype.nexus.security.user.UserManager\nimport org.sonatype.nexus.security.privilege.Privilege\n\nparsed_args = new JsonSlurper().parseText(args)\n\nauthManager = security.getSecuritySystem().getAuthorizationManager(UserManager.DEFAULT_SOURCE)\n\ndef privilege\nboolean update = true\n\ntry {\n    privilege = authManager.getPrivilege(parsed_args.name)\n} catch (NoSuchPrivilegeException ignored) {\n    // could not find any existing  privilege\n    update = false\n    privilege = new Privilege(\n            'id': parsed_args.name,\n            'name': parsed_args.name\n    )\n}\n\nprivilege.setDescription(parsed_args.description)\nprivilege.setType(parsed_args.type)\nprivilege.setProperties([\n        'format': parsed_args.format,\n        'repository': parsed_args.repository,\n        'actions': parsed_args.actions.join(',')\n] as Map<String, String>)\n\nif (update) {\n    authManager.updatePrivilege(privilege)\n} else {\n    authManager.addPrivilege(privilege)\n}",
  "type" : "groovy"
}, {
  "name" : "delete_blobstore",
  "content" : "import groovy.json.JsonSlurper\n\nparsed_args = new JsonSlurper().parseText(args)\n\nexistingBlobStore = blobStore.getBlobStoreManager().get(parsed_args.name)\nif (existingBlobStore != null) {\n    blobStore.getBlobStoreManager().delete(parsed_args.name)\n}",
  "type" : "groovy"
}, {
  "name" : "create_repo_pypi_hosted",
  "content" : "import groovy.json.JsonSlurper\nimport org.sonatype.nexus.repository.config.Configuration\n\nparsed_args = new JsonSlurper().parseText(args)\n\nconfiguration = new Configuration(\n        repositoryName: parsed_args.name,\n        recipeName: 'pypi-hosted',\n        online: true,\n        attributes: [\n                storage: [\n                        writePolicy: parsed_args.write_policy.toUpperCase(),\n                        blobStoreName: parsed_args.blob_store,\n                        strictContentTypeValidation: Boolean.valueOf(parsed_args.strict_content_validation)\n                ]\n        ]\n)\n\ndef existingRepository = repository.getRepositoryManager().get(parsed_args.name)\n\nif (existingRepository != null) {\n    existingRepository.stop()\n    configuration.attributes['storage']['blobStoreName'] = existingRepository.configuration.attributes['storage']['blobStoreName']\n    existingRepository.update(configuration)\n    existingRepository.start()\n} else {\n    repository.getRepositoryManager().create(configuration)\n}",
  "type" : "groovy"
}, {
  "name" : "create_repo_rubygems_group",
  "content" : "import groovy.json.JsonSlurper\nimport org.sonatype.nexus.repository.config.Configuration\n\nparsed_args = new JsonSlurper().parseText(args)\n\nconfiguration = new Configuration(\n        repositoryName: parsed_args.name,\n        recipeName: 'rubygems-group',\n        online: true,\n        attributes: [\n                group  : [\n                        memberNames: parsed_args.member_repos\n                ],\n                storage: [\n                        blobStoreName: parsed_args.blob_store,\n                        strictContentTypeValidation: Boolean.valueOf(parsed_args.strict_content_validation)\n                ]\n        ]\n)\n\ndef existingRepository = repository.getRepositoryManager().get(parsed_args.name)\n\nif (existingRepository != null) {\n    existingRepository.stop()\n    configuration.attributes['storage']['blobStoreName'] = existingRepository.configuration.attributes['storage']['blobStoreName']\n    existingRepository.update(configuration)\n    existingRepository.start()\n} else {\n    repository.getRepositoryManager().create(configuration)\n}",
  "type" : "groovy"
}, {
  "name" : "create_task",
  "content" : "import groovy.json.JsonSlurper\nimport org.sonatype.nexus.scheduling.TaskConfiguration\nimport org.sonatype.nexus.scheduling.TaskInfo\nimport org.sonatype.nexus.scheduling.TaskScheduler\nimport org.sonatype.nexus.scheduling.schedule.Schedule\n\nparsed_args = new JsonSlurper().parseText(args)\n\nTaskScheduler taskScheduler = container.lookup(TaskScheduler.class.getName())\n\nTaskInfo existingTask = taskScheduler.listsTasks().find { TaskInfo taskInfo ->\n    taskInfo.name == parsed_args.name\n}\n\nif (existingTask && !existingTask.remove()) {\n    throw new RuntimeException(\"Could not remove currently running task : \" + parsed_args.name)\n}\n\nTaskConfiguration taskConfiguration = taskScheduler.createTaskConfigurationInstance(parsed_args.typeId)\ntaskConfiguration.setName(parsed_args.name)\n\nparsed_args.taskProperties.each { key, value -> taskConfiguration.setString(key, value) }\n\nSchedule schedule = taskScheduler.scheduleFactory.cron(new Date(), parsed_args.cron)\n\ntaskScheduler.scheduleTask(taskConfiguration, schedule)",
  "type" : "groovy"
}, {
  "name" : "create_user",
  "content" : "import groovy.json.JsonSlurper\nimport org.sonatype.nexus.security.user.UserNotFoundException\n\nparsed_args = new JsonSlurper().parseText(args)\n\ntry {\n    // update an existing user\n    user = security.securitySystem.getUser(parsed_args.username)\n    user.setFirstName(parsed_args.first_name)\n    user.setLastName(parsed_args.last_name)\n    user.setEmailAddress(parsed_args.email)\n    security.securitySystem.updateUser(user)\n    security.setUserRoles(parsed_args.username, parsed_args.roles)\n    security.securitySystem.changePassword(parsed_args.username, parsed_args.password)\n} catch(UserNotFoundException ignored) {\n    // create the new user\n    security.addUser(parsed_args.username, parsed_args.first_name, parsed_args.last_name, parsed_args.email, true, parsed_args.password, parsed_args.roles)\n}",
  "type" : "groovy"
}, {
  "name" : "create_blobstore",
  "content" : "import groovy.json.JsonSlurper\n\nparsed_args = new JsonSlurper().parseText(args)\n\nexistingBlobStore = blobStore.getBlobStoreManager().get(parsed_args.name)\nif (existingBlobStore == null) {\n    blobStore.createFileBlobStore(parsed_args.name, parsed_args.path)\n}",
  "type" : "groovy"
}, {
  "name" : "create_repo_pypi_proxy",
  "content" : "import groovy.json.JsonSlurper\nimport org.sonatype.nexus.repository.config.Configuration\n\nparsed_args = new JsonSlurper().parseText(args)\n\nauthentication = parsed_args.remote_username == null ? null : [\n        type: 'username',\n        username: parsed_args.remote_username,\n        password: parsed_args.remote_password\n]\n\nconfiguration = new Configuration(\n        repositoryName: parsed_args.name,\n        recipeName: 'pypi-proxy',\n        online: true,\n        attributes: [\n                proxy  : [\n                        remoteUrl: parsed_args.remote_url,\n                        contentMaxAge: 1440.0,\n                        metadataMaxAge: 1440.0\n                ],\n                httpclient: [\n                        blocked: false,\n                        autoBlock: true,\n                        connection: [\n                                useTrustStore: false\n                        ]\n                ],\n                storage: [\n                        blobStoreName: parsed_args.blob_store,\n                        strictContentTypeValidation: Boolean.valueOf(parsed_args.strict_content_validation)\n                ],\n                negativeCache: [\n                        enabled: true,\n                        timeToLive: 1440.0\n                ]\n        ]\n)\n\ndef existingRepository = repository.getRepositoryManager().get(parsed_args.name)\n\nif (existingRepository != null) {\n    existingRepository.stop()\n    configuration.attributes['storage']['blobStoreName'] = existingRepository.configuration.attributes['storage']['blobStoreName']\n    existingRepository.update(configuration)\n    existingRepository.start()\n} else {\n    repository.getRepositoryManager().create(configuration)\n}",
  "type" : "groovy"
}, {
  "name" : "create_repo_bower_hosted",
  "content" : "import groovy.json.JsonSlurper\nimport org.sonatype.nexus.repository.config.Configuration\n\nparsed_args = new JsonSlurper().parseText(args)\n\nconfiguration = new Configuration(\n        repositoryName: parsed_args.name,\n        recipeName: 'bower-hosted',\n        online: true,\n        attributes: [\n                storage: [\n                        writePolicy: parsed_args.write_policy.toUpperCase(),\n                        blobStoreName: parsed_args.blob_store,\n                        strictContentTypeValidation: Boolean.valueOf(parsed_args.strict_content_validation)\n                ]\n        ]\n)\n\ndef existingRepository = repository.getRepositoryManager().get(parsed_args.name)\n\nif (existingRepository != null) {\n    existingRepository.stop()\n    configuration.attributes['storage']['blobStoreName'] = existingRepository.configuration.attributes['storage']['blobStoreName']\n    existingRepository.update(configuration)\n    existingRepository.start()\n} else {\n    repository.getRepositoryManager().create(configuration)\n}",
  "type" : "groovy"
}, {
  "name" : "create_repo_maven_proxy",
  "content" : "import groovy.json.JsonSlurper\nimport org.sonatype.nexus.repository.config.Configuration\n\nparsed_args = new JsonSlurper().parseText(args)\n\nauthentication = parsed_args.remote_username == null ? null : [\n        type: 'username',\n        username: parsed_args.remote_username,\n        password: parsed_args.remote_password\n]\n\nconfiguration = new Configuration(\n        repositoryName: parsed_args.name,\n        recipeName: 'maven2-proxy',\n        online: true,\n        attributes: [\n                maven  : [\n                        versionPolicy: parsed_args.version_policy.toUpperCase(),\n                        layoutPolicy : parsed_args.layout_policy.toUpperCase()\n                ],\n                proxy  : [\n                        remoteUrl: parsed_args.remote_url,\n                        contentMaxAge: 1440.0,\n                        metadataMaxAge: 1440.0\n                ],\n                httpclient: [\n                        blocked: false,\n                        autoBlock: true,\n                        authentication: authentication,\n                        connection: [\n                                useTrustStore: false\n                        ]\n                ],\n                storage: [\n                        blobStoreName: parsed_args.blob_store,\n                        strictContentTypeValidation: Boolean.valueOf(parsed_args.strict_content_validation)\n                ],\n                negativeCache: [\n                        enabled: true,\n                        timeToLive: 1440.0\n                ]\n        ]\n)\n\ndef existingRepository = repository.getRepositoryManager().get(parsed_args.name)\n\nif (existingRepository != null) {\n    existingRepository.stop()\n    configuration.attributes['storage']['blobStoreName'] = existingRepository.configuration.attributes['storage']['blobStoreName']\n    existingRepository.update(configuration)\n    existingRepository.start()\n} else {\n    repository.getRepositoryManager().create(configuration)\n}",
  "type" : "groovy"
}, {
  "name" : "create_repo_pypi_group",
  "content" : "import groovy.json.JsonSlurper\nimport org.sonatype.nexus.repository.config.Configuration\n\nparsed_args = new JsonSlurper().parseText(args)\n\nconfiguration = new Configuration(\n        repositoryName: parsed_args.name,\n        recipeName: 'pypi-group',\n        online: true,\n        attributes: [\n                group  : [\n                        memberNames: parsed_args.member_repos\n                ],\n                storage: [\n                        blobStoreName: parsed_args.blob_store,\n                        strictContentTypeValidation: Boolean.valueOf(parsed_args.strict_content_validation)\n                ]\n        ]\n)\n\ndef existingRepository = repository.getRepositoryManager().get(parsed_args.name)\n\nif (existingRepository != null) {\n    existingRepository.stop()\n    configuration.attributes['storage']['blobStoreName'] = existingRepository.configuration.attributes['storage']['blobStoreName']\n    existingRepository.update(configuration)\n    existingRepository.start()\n} else {\n    repository.getRepositoryManager().create(configuration)\n}",
  "type" : "groovy"
}, {
  "name" : "create_repo_bower_proxy",
  "content" : "import groovy.json.JsonSlurper\nimport org.sonatype.nexus.repository.config.Configuration\n\nparsed_args = new JsonSlurper().parseText(args)\n\nauthentication = parsed_args.remote_username == null ? null : [\n        type: 'username',\n        username: parsed_args.remote_username,\n        password: parsed_args.remote_password\n]\n\nconfiguration = new Configuration(\n        repositoryName: parsed_args.name,\n        recipeName: 'bower-proxy',\n        online: true,\n        attributes: [\n                bower: [\n                        rewritePackageUrls: true\n                ],\n                proxy: [\n                        remoteUrl: parsed_args.remote_url,\n                        contentMaxAge: 1440.0,\n                        metadataMaxAge: 1440.0\n                ],\n                httpclient: [\n                        blocked: false,\n                        autoBlock: true\n                ],\n                storage: [\n                        blobStoreName: parsed_args.blob_store,\n                        strictContentTypeValidation: Boolean.valueOf(parsed_args.strict_content_validation)\n                ],\n                negativeCache: [\n                        enabled: true,\n                        timeToLive: 1440.0\n                ]\n        ]\n)\n\ndef existingRepository = repository.getRepositoryManager().get(parsed_args.name)\n\nif (existingRepository != null) {\n    existingRepository.stop()\n    configuration.attributes['storage']['blobStoreName'] = existingRepository.configuration.attributes['storage']['blobStoreName']\n    existingRepository.update(configuration)\n    existingRepository.start()\n} else {\n    repository.getRepositoryManager().create(configuration)\n}",
  "type" : "groovy"
}, {
  "name" : "setup_capability",
  "content" : "import groovy.json.JsonSlurper\nimport org.sonatype.nexus.capability.CapabilityReference\nimport org.sonatype.nexus.capability.CapabilityType\nimport org.sonatype.nexus.internal.capability.DefaultCapabilityReference\nimport org.sonatype.nexus.internal.capability.DefaultCapabilityRegistry\n\nparsed_args = new JsonSlurper().parseText(args)\n\nparsed_args.capability_properties['headerEnabled'] = parsed_args.capability_properties['headerEnabled'].toString()\nparsed_args.capability_properties['footerEnabled'] = parsed_args.capability_properties['footerEnabled'].toString()\n\ndef capabilityRegistry = container.lookup(DefaultCapabilityRegistry.class.getName())\ndef capabilityType = CapabilityType.capabilityType(parsed_args.capability_typeId)\n\nDefaultCapabilityReference existing = capabilityRegistry.all.find { CapabilityReference capabilityReference ->\n    capabilityReference.context().descriptor().type() == capabilityType\n}\n\nif (existing) {\n    log.info(parsed_args.typeId + ' capability updated to: {}',\n            capabilityRegistry.update(existing.id(), existing.active, existing.notes(), parsed_args.capability_properties).toString()\n    )\n}\nelse {\n    log.info(parsed_args.typeId + ' capability created as: {}', capabilityRegistry.\n            add(capabilityType, true, 'configured through api', parsed_args.capability_properties).toString()\n    )\n}",
  "type" : "groovy"
}, {
  "name" : "create_repo_maven_group",
  "content" : "import groovy.json.JsonSlurper\nimport org.sonatype.nexus.repository.config.Configuration\n\nparsed_args = new JsonSlurper().parseText(args)\n\nconfiguration = new Configuration(\n        repositoryName: parsed_args.name,\n        recipeName: 'maven2-group',\n        online: true,\n        attributes: [\n                group  : [\n                        memberNames: parsed_args.member_repos\n                ],\n                storage: [\n                        blobStoreName: parsed_args.blob_store,\n                        strictContentTypeValidation: Boolean.valueOf(parsed_args.strict_content_validation)\n                ]\n        ]\n)\n\ndef existingRepository = repository.getRepositoryManager().get(parsed_args.name)\n\nif (existingRepository != null) {\n    existingRepository.stop()\n    configuration.attributes['storage']['blobStoreName'] = existingRepository.configuration.attributes['storage']['blobStoreName']\n    existingRepository.update(configuration)\n    existingRepository.start()\n} else {\n    repository.getRepositoryManager().create(configuration)\n}",
  "type" : "groovy"
}, {
  "name" : "create_repo_raw_hosted",
  "content" : "import groovy.json.JsonSlurper\nimport org.sonatype.nexus.repository.config.Configuration\n\nparsed_args = new JsonSlurper().parseText(args)\n\nconfiguration = new Configuration(\n        repositoryName: parsed_args.name,\n        recipeName: 'raw-hosted',\n        online: true,\n        attributes: [\n                storage: [\n                        writePolicy: parsed_args.write_policy.toUpperCase(),\n                        blobStoreName: parsed_args.blob_store,\n                        strictContentTypeValidation: Boolean.valueOf(parsed_args.strict_content_validation)\n                ]\n        ]\n)\n\ndef existingRepository = repository.getRepositoryManager().get(parsed_args.name)\n\nif (existingRepository != null) {\n    existingRepository.stop()\n    configuration.attributes['storage']['blobStoreName'] = existingRepository.configuration.attributes['storage']['blobStoreName']\n    existingRepository.update(configuration)\n    existingRepository.start()\n} else {\n    repository.getRepositoryManager().create(configuration)\n}",
  "type" : "groovy"
}, {
  "name" : "create_repo_bower_group",
  "content" : "import groovy.json.JsonSlurper\nimport org.sonatype.nexus.repository.config.Configuration\n\nparsed_args = new JsonSlurper().parseText(args)\n\nconfiguration = new Configuration(\n        repositoryName: parsed_args.name,\n        recipeName: 'bower-group',\n        online: true,\n        attributes: [\n                group  : [\n                        memberNames: parsed_args.member_repos\n                ],\n                storage: [\n                        blobStoreName: parsed_args.blob_store,\n                        strictContentTypeValidation: Boolean.valueOf(parsed_args.strict_content_validation)\n                ]\n        ]\n)\n\ndef existingRepository = repository.getRepositoryManager().get(parsed_args.name)\n\nif (existingRepository != null) {\n    existingRepository.stop()\n    configuration.attributes['storage']['blobStoreName'] = existingRepository.configuration.attributes['storage']['blobStoreName']\n    existingRepository.update(configuration)\n    existingRepository.start()\n} else {\n    repository.getRepositoryManager().create(configuration)\n}",
  "type" : "groovy"
}, {
  "name" : "setup_role",
  "content" : "import groovy.json.JsonSlurper\nimport org.sonatype.nexus.security.user.UserManager\nimport org.sonatype.nexus.security.role.NoSuchRoleException\n\nparsed_args = new JsonSlurper().parseText(args)\n\nauthManager = security.getSecuritySystem().getAuthorizationManager(UserManager.DEFAULT_SOURCE)\n\ndef existingRole = null\n\ntry {\n    existingRole = authManager.getRole(parsed_args.id)\n} catch (NoSuchRoleException ignored) {\n    // could not find role\n}\n\nprivileges = (parsed_args.privileges == null ? new HashSet() : parsed_args.privileges.toSet())\nroles = (parsed_args.roles == null ? new HashSet() : parsed_args.roles.toSet())\n\nif (existingRole != null) {\n    existingRole.setName(parsed_args.name)\n    existingRole.setDescription(parsed_args.description)\n    existingRole.setPrivileges(privileges)\n    existingRole.setRoles(roles)\n    authManager.updateRole(existingRole)\n} else {\n    security.addRole(parsed_args.id, parsed_args.name, parsed_args.description, privileges.toList(), roles.toList())\n}",
  "type" : "groovy"
}, {
  "name" : "create_repo_maven_hosted",
  "content" : "import groovy.json.JsonSlurper\nimport org.sonatype.nexus.repository.config.Configuration\n\nparsed_args = new JsonSlurper().parseText(args)\n\nconfiguration = new Configuration(\n        repositoryName: parsed_args.name,\n        recipeName: 'maven2-hosted',\n        online: true,\n        attributes: [\n                maven  : [\n                        versionPolicy: parsed_args.version_policy.toUpperCase(),\n                        layoutPolicy : parsed_args.layout_policy.toUpperCase()\n                ],\n                storage: [\n                        writePolicy: parsed_args.write_policy.toUpperCase(),\n                        blobStoreName: parsed_args.blob_store,\n                        strictContentTypeValidation: Boolean.valueOf(parsed_args.strict_content_validation)\n                ]\n        ]\n)\n\ndef existingRepository = repository.getRepositoryManager().get(parsed_args.name)\n\nif (existingRepository != null) {\n    existingRepository.stop()\n    configuration.attributes['storage']['blobStoreName'] = existingRepository.configuration.attributes['storage']['blobStoreName']\n    existingRepository.update(configuration)\n    existingRepository.start()\n} else {\n    repository.getRepositoryManager().create(configuration)\n}",
  "type" : "groovy"
}, {
  "name" : "create_repo_raw_proxy",
  "content" : "import groovy.json.JsonSlurper\nimport org.sonatype.nexus.repository.config.Configuration\n\nparsed_args = new JsonSlurper().parseText(args)\n\nauthentication = parsed_args.remote_username == null ? null : [\n        type: 'username',\n        username: parsed_args.remote_username,\n        password: parsed_args.remote_password\n]\n\nconfiguration = new Configuration(\n        repositoryName: parsed_args.name,\n        recipeName: 'raw-proxy',\n        online: true,\n        attributes: [\n                proxy  : [\n                        remoteUrl: parsed_args.remote_url,\n                        contentMaxAge: 1440.0,\n                        metadataMaxAge: 1440.0\n                ],\n                httpclient: [\n                        blocked: false,\n                        autoBlock: true,\n                        connection: [\n                                useTrustStore: false\n                        ]\n                ],\n                storage: [\n                        blobStoreName: parsed_args.blob_store,\n                        strictContentTypeValidation: Boolean.valueOf(parsed_args.strict_content_validation)\n                ],\n                negativeCache: [\n                        enabled: true,\n                        timeToLive: 1440.0\n                ]\n        ]\n)\n\ndef existingRepository = repository.getRepositoryManager().get(parsed_args.name)\n\nif (existingRepository != null) {\n    existingRepository.stop()\n    configuration.attributes['storage']['blobStoreName'] = existingRepository.configuration.attributes['storage']['blobStoreName']\n    existingRepository.update(configuration)\n    existingRepository.start()\n} else {\n    repository.getRepositoryManager().create(configuration)\n}",
  "type" : "groovy"
}, {
  "name" : "create_repo_npm_hosted",
  "content" : "import groovy.json.JsonSlurper\nimport org.sonatype.nexus.repository.config.Configuration\n\nparsed_args = new JsonSlurper().parseText(args)\n\nconfiguration = new Configuration(\n        repositoryName: parsed_args.name,\n        recipeName: 'npm-hosted',\n        online: true,\n        attributes: [\n                storage: [\n                        writePolicy: parsed_args.write_policy.toUpperCase(),\n                        blobStoreName: parsed_args.blob_store,\n                        strictContentTypeValidation: Boolean.valueOf(parsed_args.strict_content_validation)\n                ]\n        ]\n)\n\ndef existingRepository = repository.getRepositoryManager().get(parsed_args.name)\n\nif (existingRepository != null) {\n    existingRepository.stop()\n    configuration.attributes['storage']['blobStoreName'] = existingRepository.configuration.attributes['storage']['blobStoreName']\n    existingRepository.update(configuration)\n    existingRepository.start()\n} else {\n    repository.getRepositoryManager().create(configuration)\n}",
  "type" : "groovy"
} ]